{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://ts-drag-drop/./src/components/baseComponent.ts","webpack://ts-drag-drop/./src/utils/validation.ts","webpack://ts-drag-drop/./src/decorators/autobind.ts","webpack://ts-drag-drop/./src/models/project.ts","webpack://ts-drag-drop/./src/state/projectState.ts","webpack://ts-drag-drop/./src/components/projectInput.ts","webpack://ts-drag-drop/./src/components/projectItem.ts","webpack://ts-drag-drop/./src/components/projectList.ts","webpack://ts-drag-drop/./src/app.ts"],"sourcesContent":["// create an inheritable base Component class\nexport default abstract class Component<T extends HTMLElement, U extends HTMLElement> {\n    templateEl: HTMLTemplateElement;\n    hostEl: T;\n    element: U;\n\n    constructor(templateId: string, hostElementId: string, insertAtStart: boolean, newElementId?: string) {\n        // select the template to append\n        this.templateEl = document.getElementById(templateId)! as HTMLTemplateElement;\n\n        // select the host element to append the template\n        this.hostEl = document.getElementById(hostElementId)! as T;\n\n        // take a copy of the template content to be appended and extract the first element child\n        const importedNode = document.importNode(this.templateEl.content, true);\n        this.element = importedNode.firstElementChild as U;\n\n        // add an id attribute to take advantage of pre-written css\n        if (newElementId) {\n            // this.element.id = `${this.type}-projects`;\n            this.element.id = newElementId;\n        }\n\n        this.attach(insertAtStart);\n    }\n\n    private attach(insertAtBegin: boolean) {\n        // insert the template element to the host element in the beginning\n        this.hostEl.insertAdjacentElement(\n            insertAtBegin ? \"afterbegin\" : \"beforeend\",\n            this.element)\n    }\n\n    abstract configure(): void;\n    abstract renderContent(): void;\n}","// create a reusable validator function\nexport interface Validatable {\n    value: string | number;\n    required?: boolean;\n    minLength?: number;\n    maxLength?: number;\n    min?: number;\n    max?: number;\n}\nexport function validate(validatableInput: Validatable) {\n    let isValid = true;\n    if (validatableInput.required) {\n        isValid = isValid && validatableInput.value.toString().trim().length !== 0;\n    }\n    if (\n        validatableInput.minLength != null &&\n        typeof validatableInput.value === 'string'\n    ) {\n        isValid =\n            isValid && validatableInput.value.length >= validatableInput.minLength;\n    }\n    if (\n        validatableInput.maxLength != null &&\n        typeof validatableInput.value === 'string'\n    ) {\n        isValid =\n            isValid && validatableInput.value.length <= validatableInput.maxLength;\n    }\n    if (\n        validatableInput.min != null &&\n        typeof validatableInput.value === 'number'\n    ) {\n        isValid = isValid && validatableInput.value >= validatableInput.min;\n    }\n    if (\n        validatableInput.max != null &&\n        typeof validatableInput.value === 'number'\n    ) {\n        isValid = isValid && validatableInput.value <= validatableInput.max;\n    }\n    return isValid;\n}","// create a reusable autoBinder decorator\nexport default function AutoBind(_: any, _2: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n    const adjustedDescriptor: PropertyDescriptor = {\n        configurable: true,\n        enumerable: false,\n        get() {\n            const boundFn = originalMethod.bind(this);\n            return boundFn;\n        }\n    }\n    return adjustedDescriptor;\n}","// create a custom project Type\nexport enum ProjectStatus { Active, Finished }\nexport class Project {\n    constructor(\n        public id: number,\n        public title: string,\n        public description: string,\n        public people: number,\n        public status: ProjectStatus\n    ) { }\n}","import { Project, ProjectStatus } from \"../models/project\";\n\n// create a custom listener function  type\ntype Listener<T> = (items: T[]) => void;\n\n// create an inheritable base class for app State\nclass State<T> {\n    protected listeners: Listener<T>[] = [];\n\n    addListener(fn: Listener<T>) {\n        this.listeners.push(fn);\n    }\n}\n\n// create a class fro application state\nexport class ProjectState extends State<Project> {\n    private projects: Project[] = [];\n    private static instance: ProjectState;\n\n    private constructor() {\n        super()\n    }\n\n    static getInstance() {\n        if (this.instance) {\n            return this.instance;\n        }\n        this.instance = new ProjectState()\n        return this.instance;\n    }\n\n    // method to generate a unique id\n    generateUniqueId = (length: number) => {\n        return parseInt(Math.ceil(Math.random() * Date.now()).toPrecision(length).toString().replace(\".\", \"\"))\n    }\n\n    addProject(title: string, description: string, people: number) {\n        const newProject = new Project(this.generateUniqueId(16), title, description, people, ProjectStatus.Active)\n        // push the newly created project to the projects array\n        this.projects.push(newProject);\n        this.updateListeners();\n    }\n\n    moveProject(projectId: number, newStatus: ProjectStatus) {\n        const project = this.projects.find(el => el.id === projectId);\n        if (project && project.status !== newStatus) {\n            project.status = newStatus;\n            this.updateListeners();\n        }\n    }\n\n    updateListeners() {\n        // call registered listener functions\n        for (const listenerFn of this.listeners) {\n            // call each fn with a shallow copy of projects array\n            listenerFn(this.projects.slice())\n        }\n    }\n}\n\nexport const projectState = ProjectState.getInstance();","import Component from \"./baseComponent\";\nimport { Validatable, validate } from \"../utils/validation\";\nimport AutoBind from \"../decorators/autobind\";\nimport { projectState } from \"../state/projectState\";\n\n\n// project input class extending Component\nexport default class ProjectInput extends Component<HTMLDivElement, HTMLElement> {\n    titleEl: HTMLInputElement;\n    descriptionEl: HTMLInputElement;\n    peopleEl: HTMLInputElement;\n\n    constructor() {\n        super(\"project-input\", \"app\", true, \"user-input\")\n\n        // reach out the input elements\n        this.titleEl = this.element.querySelector(\"#title\") as HTMLInputElement;\n        this.descriptionEl = this.element.querySelector(\"#description\") as HTMLInputElement;\n        this.peopleEl = this.element.querySelector(\"#people\") as HTMLInputElement;\n\n        // call the attach method to invoke right away\n        this.configure();\n    }\n\n    configure() {\n        this.element.addEventListener(\"submit\", this.submitHandler)\n    }\n\n    renderContent(): void { }\n\n    // collect and validate user data\n    private collectUSerData(): [string, string, number] | void {\n        const title = this.titleEl.value;\n        const description = this.descriptionEl.value;\n        const people = this.peopleEl.value;\n\n        // create objects for validation and validate\n        const titleValidatable: Validatable = {\n            value: title,\n            required: true\n        };\n        const descriptionValidatable: Validatable = {\n            value: description,\n            required: true,\n            minLength: 5\n        };\n        const peopleValidatable: Validatable = {\n            value: +people,\n            required: true,\n            min: 1,\n            max: 5\n        };\n        if (\n            !validate(titleValidatable) ||\n            !validate(descriptionValidatable) ||\n            !validate(peopleValidatable)\n        ) {\n            alert(\"Invalid input!\")\n            return;\n        } else {\n            return [title, description, +people]\n        }\n    }\n\n    // clear inputs after submit\n    private clearInputs() {\n        this.titleEl.value = \"\";\n        this.descriptionEl.value = \"\";\n        this.peopleEl.value = \"\";\n    }\n\n    // auto bind submit handler for event listener\n    @AutoBind\n    private submitHandler(e: Event) {\n        e.preventDefault()\n        const userData = this.collectUSerData();\n        if (Array.isArray(userData)) {\n            const [title, description, people] = userData;\n            // add the user data to the app state\n            projectState.addProject(title, description, people)\n\n            // clear user input fields\n            this.clearInputs();\n        }\n    }\n}","import Component from \"./baseComponent\";\nimport AutoBind from \"../decorators/autobind\";\nimport { Project } from \"../models/project\";\nimport { Draggable } from \"../models/dragDrop\";\n\n// project item class extending Component\nexport default class ProjectItem extends Component<HTMLUListElement, HTMLLIElement> implements Draggable {\n    private project: Project;\n\n    get persons() {\n        if (this.project.people === 1) {\n            return \"1 person\";\n        }\n        return `${this.project.people} people`;\n    }\n\n    constructor(hostId: string, project: Project) {\n        super(\"single-project\", hostId, false, project.id.toString())\n        this.project = project\n        this.configure();\n        this.renderContent()\n    }\n\n    @AutoBind\n    handleDragStart(event: DragEvent): void {\n        event.dataTransfer!.setData('text/plain', this.project.id.toString())\n        event.dataTransfer!.effectAllowed = 'move';\n    }\n\n    handleDragEnd(_: DragEvent): void {\n        console.log(\"drag end\")\n    }\n\n    configure() {\n        this.element.addEventListener(\"dragstart\", this.handleDragStart)\n        this.element.addEventListener(\"dragend\", this.handleDragEnd)\n    }\n    renderContent() {\n        this.element.querySelector(\"h2\")!.textContent = this.project.title;\n        this.element.querySelector(\"h3\")!.textContent = this.persons;\n        this.element.querySelector(\"p\")!.textContent = this.project.description;\n    }\n}","import Component from \"./baseComponent\";\nimport ProjectItem from \"./projectItem\";\nimport AutoBind from \"../decorators/autobind\";\nimport { Project, ProjectStatus } from \"../models/project\";\nimport { DragTarget } from \"../models/dragDrop\";\nimport { projectState } from \"../state/projectState\";\n\n\n// project list class extending Component\nexport default class ProjectList extends Component<HTMLDivElement, HTMLElement> implements DragTarget {\n    assignedProjects: Project[];\n\n    constructor(private type: \"active\" | \"finished\") {\n        super(\"project-list\", \"app\", false, `${type}-projects`)\n        this.assignedProjects = [];\n\n        this.configure()\n        this.renderContent();\n    }\n\n    @AutoBind\n    handleDragOver(event: DragEvent): void {\n        if (event.dataTransfer && event.dataTransfer.types[0] === 'text/plain') {\n            event.preventDefault();\n            const listEl = this.element.querySelector('ul')!;\n            listEl.classList.add(\"droppable\")\n        }\n    };\n\n    @AutoBind\n    handleDrop(event: DragEvent): void {\n        const projectId = +event.dataTransfer!.getData(\"text/plain\");\n        projectState.moveProject(projectId, this.type === \"active\" ? ProjectStatus.Active : ProjectStatus.Finished);\n    };\n\n    @AutoBind\n    handleDragLeave(event: DragEvent): void {\n        const listEl = this.element.querySelector('ul')!;\n        listEl.classList.remove(\"droppable\")\n    };\n\n    configure() {\n        this.element.addEventListener(\"dragover\", this.handleDragOver);\n        this.element.addEventListener(\"dragleave\", this.handleDragLeave);\n        this.element.addEventListener(\"drop\", this.handleDrop);\n        // set up a listener\n        projectState.addListener((projects: Project[]) => {\n            const relevantProjects = projects.filter(p => {\n                if (this.type === \"active\") {\n                    return p.status === ProjectStatus.Active;\n                }\n                return p.status === ProjectStatus.Finished;\n            })\n            this.assignedProjects = relevantProjects;\n            this.renderProjects();\n        })\n    };\n\n    renderContent() {\n        // assign an id to ul to reference later\n        const listId = `${this.type}-projects-list`;\n        this.element.querySelector(\"ul\")!.id = listId;\n\n        // populate h2 element\n        this.element.querySelector(\"h2\")!.textContent = this.type.toUpperCase() + \" PROJECTS\"\n    }\n\n    private renderProjects() {\n        const listEl = document.getElementById(`${this.type}-projects-list`)! as HTMLUListElement;\n        // reset content before every rerender\n        listEl.innerText = '';\n        for (const projectItem of this.assignedProjects) {\n            new ProjectItem(this.element.querySelector(\"ul\")!.id, projectItem)\n        }\n    }\n\n}","import ProjectInput from \"./components/projectInput\";\nimport ProjectList from \"./components/projectList\";\n\nnew ProjectInput();\nnew ProjectList(\"active\");\nnew ProjectList(\"finished\");"],"names":["Component","constructor","templateId","hostElementId","insertAtStart","newElementId","this","templateEl","document","getElementById","hostEl","importedNode","importNode","content","element","firstElementChild","id","attach","insertAtBegin","insertAdjacentElement","validate","validatableInput","isValid","required","value","toString","trim","length","minLength","maxLength","min","max","AutoBind","_","_2","descriptor","originalMethod","configurable","enumerable","get","bind","ProjectStatus","Project","title","description","people","status","ProjectState","listeners","addListener","fn","push","super","projects","generateUniqueId","parseInt","Math","ceil","random","Date","now","toPrecision","replace","static","instance","addProject","newProject","Active","updateListeners","moveProject","projectId","newStatus","project","find","el","listenerFn","slice","projectState","getInstance","ProjectInput","titleEl","querySelector","descriptionEl","peopleEl","configure","addEventListener","submitHandler","renderContent","collectUSerData","descriptionValidatable","peopleValidatable","alert","clearInputs","e","preventDefault","userData","Array","isArray","ProjectItem","hostId","persons","handleDragStart","event","dataTransfer","setData","effectAllowed","handleDragEnd","console","log","textContent","ProjectList","type","assignedProjects","handleDragOver","types","classList","add","handleDrop","getData","Finished","handleDragLeave","remove","relevantProjects","filter","p","renderProjects","listId","toUpperCase","innerText","projectItem"],"sourceRoot":""}